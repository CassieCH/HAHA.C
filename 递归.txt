
1、斐波那契数：使用递归：
①#define _CRT_SECURE_NO_WARNINGS 5
#include<stdio.h>

int main()
{
	int n;
	int m;
    int fib(int x);
	scanf("%d", &n);
	
	m=	fib(n);
	printf("%d",m);
}
int fib(int x)
{
	int z;
	if (x< 3)
	{
		
		return 1;
	}
	else
		z=fib(x - 1) + fib(x - 2);
		return (z);
		
}
②不使用递归：
#define _CRT_SECURE_NO_WARNINGS 5
#include<stdio.h>

int main()
{
	int fib(int x);
	int n;
	int m;
	scanf("%d", &n);
	m = fib(n);
	printf("%d", m);

}
int fib(int x)
{
	int a = 1;
	int b = 1;
	int c;
	int i;
	for (i = 0; i < x - 2; i++)
	{
		c = a + b;
		a = b;
		b = c;

	}
	return c;
}

2.编写一个函数实现n^k，使用递归实现
#include<stdio.h>
int main()
{
	int m;
	int n;
	int q;
	int zhishu(int x,int y);
	scanf("%d %d",&m,&n);
	q= zhishu(m,n);
	printf("%d^%d=%d",m,n,q);
	
}
	int zhishu(int x,int y)
	{
       if(x==0) 
       return 0;
       else if (y==1)
	   return x;
	   else
	    return x*zhishu(x,y-1);
       
	}
3. 写一个递归函数DigitSum(n)，输入一个非负整数，返回组成它的数字之和，例如，调用DigitSum(1729)，则应该返回1+7+2+9，它的和是19 

#define _CRT_SECURE_NO_WARNINGS 5
#include<stdio.h>
int main()
{
	int n;
	int q;
	
	scanf("%d", &n);
	int print_add(int x);

	q = print_add(n);
	printf("%d", q);

}
int print_add(int x)
{
	int a=0;
	
	if (x<10)
	{
		return x;
	}
	else if(x>=10)
	{
		
	
	return (x%10)+print_add(x/10);
	
	}
}
4.递归和非递归分别实现求n的阶乘
递归：#include<stdio.h> 
int main()
{
	int n;
	int m;
	scanf("%d",&n);
	int factorial(int x);
	m=factorial(n);
	printf("%d",m);
}
int factorial(int x)
{    
    if(x<=1)
    return 1;
    else
	return (x*factorial(x-1));
}
不递归#include<stdio.h> 
int main()
{
	int n;
	int m;
	scanf("%d",&n);
	int factorial(int x);
	m=factorial(n);
	printf("%d",m);
}
int factorial(int x)
{    int a=1;
    if(x<=1)
    return 1;
    else while(x>1)
   {
	 a=a*x;
	 x--;
          }
          return a;
}
5.递归方式实现打印一个整数的每一位 
#include<stdio.h>
int main()
{
	int n ;
	scanf("%d", &n);
	int print(int n);
	print(n);
}
int print(int n)
{
	if (n < 10)
		return n;
	else {
		print(n / 10);
	}
	printf("%d", n % 10);
}	