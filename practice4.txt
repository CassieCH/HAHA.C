1. 
写一个函数返回参数二进制中 1 的个数 
比如： 15 0000 1111 4 个 1 
程序原型： 
int count_one_bits(unsigned int value) 
{ 
// 返回 1的位数 
} 

2.获取一个数二进制序列中所有的偶数位和奇数位， 
分别输出二进制序列。 

3. 输出一个整数的每一位。 

4.编程实现： 
两个int（32位）整数m和n的二进制表达中，有多少个位(bit)不同？ 
输入例子: 
1999 2299 
输出例子:7
1、#include<stdio.h>
int main()
{
	int a = 0;
	scanf("%d", &a);
	int count=0;
	int count_one_bits(unsigned int a);
	count=count_one_bits(a);
	printf("%d",count);
}
int count_one_bits(unsigned int a)
{
	int count = 0;
	while(a!=0)
	{
		if(a%2==1)
		{
			count++;
		}
		a/=2;
		
		
	}
	return count;
}
2、#include <stdio.h>  
int main ()  
{  
    int num=0,i=0;  
    scanf("%d",&num);  
    printf("奇数序列为：");  
    for(i=31;i>=0;i-=2)  //也是控制32次（每个整型数按32位来算），只是从31位开始移动  
    {  
        printf("%d ",(num>>i)&1);  //第一次向右移动31位和1与得到第一位情况，每次变化2位，即可得到奇数位情况  
    }  
    printf("\n");  
    printf("偶数序列为：");  
    for(i=30;i>=0;i-=2)  //向右移动30位，再与1所得结果是原来数字的第二位，再移28位...  
    {  
        printf("%d ",(num>>i)&1);   
    }  
    printf("\n");  
  
    return 0;  
} 
3、#include<stdio.h>
int main()
{
	int a = 0;
	scanf("%d", &a);
	int print(int x);
	print(a);

}

	int print(int x)
	{
		if (x < 10)
		{
			printf("%d ",x);
		}
	else if(x>=10)
	{
		print(x / 10); 
	
		printf("%d ", x % 10);} 
}
4、#define _CRT_SECURE_NO_WARNINGS 5
#include<stdio.h>
int main()
{
    int m = 0;
    int n = 0;
    int i = 0;
    int arr1[32] = { 0 };
    int arr2[32] = { 0 };
    int sz = 31;
    int count = 0;
    scanf("%d,%d", &m,&n);
    while (m > 0)
    {
        i = m % 2;
        m /= 2;
        arr1[sz] = i;
        sz--;
    }
    sz = 31;
    while (n > 0)
    {
        i = n % 2;
        n /= 2;
        arr2[sz] = i;
        sz--;
    }
    for (i = 0; i < 32; i++)
    {
        if( (arr1[i] ^ arr2[i]) == 1)
        {
            count++;
        }
    }
    printf("%d",count) ;
    return 0;
}