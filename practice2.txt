1. 
实现一个函数，打印乘法口诀表，口诀表的行数和列数自己指定， 
输入9，输出9*9口诀表，输出12，输出12*12的乘法口诀表。 

2. 
使用函数实现两个数的交换。 

3. 
实现一个函数判断year是不是润年。 

4. 
创建一个数组， 
实现函数init（）初始化数组、 
实现empty（）清空数组、 
实现reverse（）函数完成数组元素的逆置。 
要求：自己设计函数的参数，返回值。 

5.实现一个函数，判断一个数是不是素数。
1、#include<stdio.h>
int main()
{
	int n=0;
	int mul(int x);
	scanf("%d",&n);
	mul(n);
    	
}
int mul(int x)
{
	int a=1;
	int b=1;
	int c;int i;
	for(a=1;a<=x;a++)
	{
		for(b=1;b<=a;b++)
		{
			c=a*b;
		     printf("%d*%d=%d ",b,a,c);
		 
		}
		printf("\n");
	}
}
2、
#include<stdio.h>
int main()
{
	int m = 1;
	int n = 2;
	void swap(int*pa, int*pb);

	swap(&m, &n);
	printf("m=%d n=%d",m,n);
}
	void swap(int*pa, int*pb)
	{
		int temp = *pa;
		*pa = *pb;
		*pb = temp;
	}
3、#include<stdio.h>
int main()
{
	int year;
	int n;
	int prime_year(int x);
	for(year=1000;year<=2000;year++)
	
	{
		n=prime_year(year);
		if(n)
		{
		printf("%d ",year);
		}
	}
 } 
 	int prime_year(int x)
 	{
 		int z;
 		if((x%4==0&&x%100!=0)||(x%400==0))
 		return 1;
 		else
		  return 0;
	 }
4、#include<stdio.h>
int main()
{
	int arr[10] = { 0 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	void Init(int arr[], int sz);
	void print(int arr[], int sz);
	void reverse(int arr[],int sz);
	void empty(int arr[],int sz);
	Init(arr, sz);
	print(arr, sz);
	printf("\n");
	reverse(arr,sz) ;
	printf("\n");
	empty(arr,sz);

}
void Init(int arr[], int sz)
{
	int i = 0;
	for (i = 0; i <= sz; i++)
	{
		arr[i] = i;

	}
}
void print(int arr[], int sz)
{
	int i = 0;
	for (i = 0; i <= sz-1; i++)
	{
		printf("%d ", arr[i]);
	}
}
void reverse(int arr[],int sz)
{
	int i=0;
	int left=0;
	int right=sz-1;
	for(i=0;i<sz;i++)
	{
		while(left<right)
		{
			int tmp=arr[left];
			arr[left]=arr[right];
			arr[right]=tmp;
			left++;
			right--;
		}
		printf("%d ",arr[i]);
	}
}
void empty(int arr[],int sz)
{
	int i=0;
	for(i=0;i<sz;i++)
	{
		arr[i]=0;
			printf("%d ",arr[i]);
	}

}


5、#define _CRT_SECURE_NO_WARNINGS 5
#include<stdio.h>
int main()
{
	int a;
	int is_prime(int x);
	scanf("%d", &a);
	if (is_prime(a))

	{
		printf("%d是素数\n", a);
	}
	else
	{
		printf("%d不是素数\n", a);
	}
}
int is_prime(int x)
{
	int i;
	for (i = 2; i < x; i++)
   {
		if(x%i == 0)
		return 0;
	}
	return 1;
}